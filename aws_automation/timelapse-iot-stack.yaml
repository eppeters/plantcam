AWSTemplateFormatVersion: 2010-09-09
Description: >
  Build AWS IoT Greengrass resources required for producing a timelapse from
  a Raspberry Pi camera.
Metadata: 

Parameters: 
  ProjectName:
    Description: >
      A human-readable name that will be used in resources to
      distinguish them from other projects' resources created with this
      template. (e.g. if you are making a timelapse of weather in your
      back yard, you might use "backyard-weather" for this, and resources
      would be named things like "gg-core-backyard-weather").
    Type: String

Mappings: 

Conditions: 
  GreengrassGroup:
    Type: AWS::Greengrass::Group
    Properties:
      Name: !Sub "group-timelapse-{ProjectName}"
      RoleArn: !GetAtt GreengrassResourceRole.Arn
Resources:
  GreengrassGroup:
    Type: AWS::Greengrass::Group
    Properties:
      Name: !Sub "group-timelapse-{ProjectName}"
      RoleArn: !GetAtt GreengrassResourceRole.Arn
      InitialVersion:
        CoreDefinitionVersionArn: !Ref GreengrassCoreDefinitionVersion
        FunctionDefinitionVersionArn: !GetAtt FunctionDefinition.LatestVersionArn
        SubscriptionDefinitionVersionArn: !GetAtt SubscriptionDefinition.LatestVersionArn
        # Other Greengrass resources that can be included in a group
        # not used in this example
        #
        # DeviceDefinitionVersionArn: !Ref ExampleDeviceDefinitionVersion
        # LoggerDefinitionVersionArn: !Ref ExampleLoggerDefinitionVersion
        # ResourceDefinitionVersionArn: !Ref ExampleResourceDefinitionVersion
        # ConnectorDefinitionVersionArn: !Ref ExampleConnectorDefinitionVersion
  GreengrassCoreDefinition:
    Type: AWS::Greengrass::CoreDefinition
    Properties:
      # use CoreName + "_Core" as "thingName"
      Name: !Join ["_", [!Ref CoreName, "Core"] ]
  GreengrassCoreDefinitionVersion:
    # Example of using GreengrassCoreDefinition referring to this
    # "Version" resource
    Type: AWS::Greengrass::CoreDefinitionVersion
    Properties:
      CoreDefinitionId: !Ref GreengrassCoreDefinition
      Cores:
        - Id: !Join ["_", [!Ref CoreName, "Core"] ]
          ThingArn: !Join
                      - ":"
                      - - "arn:aws:iot"
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - !Join
                          - "/"
                          - - "thing"
                            - !Join ["_", [!Ref CoreName, "Core"] ]
          CertificateArn: !Join
                            - ":"
                            - - "arn:aws:iot"
                              - !Ref AWS::Region
                              - !Ref AWS::AccountId
                              - !Join
                                - "/"
                                - - "cert"
                                  - !GetAtt IoTThing.certificateId
          SyncShadow: "false"
  FunctionDefinition:
    # Example of using "InitialVersion" to not have to reference a separate
    # "Version" resource
    Type: 'AWS::Greengrass::FunctionDefinition'
    Properties:
      Name: FunctionDefinition
      InitialVersion:
        DefaultConfig:
          Execution:
            IsolationMode: GreengrassContainer
        Functions:
          - Id: !Join ["_", [!Ref CoreName, "sample"] ]
            FunctionArn: !Ref GGSampleFunctionVersion
            FunctionConfiguration:
              Pinned: 'true'
              Executable: index.py
              MemorySize: '65536'
              Timeout: '300'
              EncodingType: binary
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                AccessSysfs: 'false'
                Execution:
                  IsolationMode: GreengrassContainer
                  RunAs:
                    Uid: '1'
                    Gid: '10'
  SubscriptionDefinition:
    Type: 'AWS::Greengrass::SubscriptionDefinition'
    Properties:
      Name: SubscriptionDefinition
      InitialVersion:
        # Example of one-to-many subscriptions in single definition version
        Subscriptions:
          - Id: Subscription1
            Source: 'cloud'
            Subject: !Join
                        - "/"
                        - - !Ref CoreName
                          - "in"
            Target: !Ref GGSampleFunctionVersion
          - Id: Subscription2
            Source: !Ref GGSampleFunctionVersion
            Subject: !Join
                        - "/"
                        - - !Ref CoreName
                          - "out"
            Target: 'cloud'
          - Id: Subscription3
            Source: !Ref GGSampleFunctionVersion
            Subject: !Join
                        - "/"
                        - - !Ref CoreName
                          - "telem"
            Target: 'cloud'

  GGSampleFunction:
    # Lambda function deployed by Greengrass
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["_", [!Ref CoreName, "sample"] ]
      Description: Long running lambda that provides telemetry and pub/sub echo
      Handler: index.function_handler
      Runtime: python2.7
      # Role and Timeout not used when deployed to Lambda, but required for creation
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import os
          from threading import Timer
          import greengrasssdk


          counter = 0
          client = greengrasssdk.client('iot-data')


          def telemetry():
              '''Publish incrementing value to telemetry topic every 2 seconds'''
              global counter
              counter += 1
              client.publish(
                  topic='{}/telem'.format(os.environ['CORE_NAME']),
                  payload='Example telemetry counter, value: {}'.format(counter)
              )
              Timer(5, telemetry).start()
          # Call telemetry() to start telemetry publish
          telemetry()


          def function_handler(event, context):
              '''Echo message on /in topic to /out topic'''
              client.publish(
                  topic='{}/out'.format(os.environ['CORE_NAME']),
                  payload=event
              )

  # Functions need to be versioned for use in a Group config
  GGSampleFunctionVersion:
    # Example of using FunctionVersion
    Type: AWS::Lambda::Version
    Properties:
      FunctionName : !GetAtt GGSampleFunction.Arn

  GreengrassSnapshotRole:
    # Role for deployed Lambda functions to a Greengrass core to call other
    # AWS services directly
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: greengrass.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iot:*
                Resource: "*"


  
Outputs:
