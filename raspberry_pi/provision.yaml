---

- hosts: greengrass
  tasks:
    - name: Create ggc_user (AWS Greengrass) user
      user:
        name: ggc_user
        system: yes
      become: yes
    - name: Create ggc_group (AWS Greengrass) group
      group:
        name: ggc_group
        system: yes
      become: yes
    - name: Set the hardlink protection kernel parameter
      lineinfile:
        line: fs.protected_hardlinks = 1
        path: /etc/sysctl.d/98-rpi.conf
      register: hardlink_protection
      become: yes
    - name: Set the symlink protection kernel parameter
      lineinfile:
        line: fs.protected_symlinks = 1
        path: /etc/sysctl.d/98-rpi.conf
      register: symlink_protection
      become: yes
    - name: Reboot after setting kernel parameters
      reboot:
        msg: Ansible is rebooting to apply new kernel params
      when: hardlink_protection is changed or symlink_protection is changed
      become: yes
    - name: Test that the fs protection params are on
      shell: >
        tmpf=$(mktemp);
        sysctl -a 2>&1 > "$tmpf";
        grep 'fs.protected_hardlinks = 1' "$tmpf"  && grep 'fs.protected_symlinks = 1' "$tmpf"
      changed_when: false
      register: link_protection_test
      become: yes
    - fail:
        msg: Unable to set safe kernel params
      when: link_protection_test is failed
    - name: Enable cgroups for Greengrass to manage Lambda memory limits
      lineinfile:
        path: /boot/cmdline.txt
        backrefs: yes
        line: \1 cgroup_enable=memory cgroup_memory=1 \3
        regexp: (.*)(cgroup_enable=memory cgroup_memory=1)?(.*)
      register: enable_memory_cgroups
      become: yes
    - name: Reboot after setting kernel command line parameters
      reboot:
        msg: Ansible is rebooting to apply new kernel params
      when: enable_memory_cgroups is changed
      become: yes
    - name: Install JDK & JRE to support Java Lambdas and stream manager features in Greengrass
      apt:
        name:
          - openjdk-8-jdk
          - openjdk-8-jre
        update_cache: yes
      become: yes
    - name: Create a directory for the Greengrass dependency checker
      file:
        path: /home/{{ ansible_user }}/Downloads/greengrass-dependency-checker-GGCv1.10.x
        state: directory
    - name: Get the AWS dependency checker
      get_url:
        url: https://github.com/aws-samples/aws-greengrass-samples/raw/master/greengrass-dependency-checker-GGCv1.10.x.zip
        sha256sum: ee718386627abe68990786fa6cd93c12838ed260afde91411214f120424a0b47
        dest: /home/{{ ansible_user }}/Downloads/greengrass-dependency-checker-GGCv1.10.x/
    - name: Unzip the Greengrass dependency checker
      unarchive:
        src: /home/{{ ansible_user }}/Downloads/greengrass-dependency-checker-GGCv1.10.x/greengrass-dependency-checker-GGCv1.10.x.zip
        remote_src: yes
        dest: /home/{{ ansible_user }}/Downloads/greengrass-dependency-checker-GGCv1.10.x/
    - name: Run the Greengrass dependency checker
      shell: >
        cd /home/{{ ansible_user }}/Downloads/greengrass-dependency-checker-GGCv1.10.x/greengrass-dependency-checker-GGCv1.10.x &&
        ./check_ggc_dependencies
      become: yes
      register: dependency_checker
    - fail:
        msg: >
          Oh no! The dependency checker says you can't go on.
          Manually check the output of ./check_ggc_dependencies, and if you
          can determine what is wrong, consider filing an issue or improving this
          playbook's handling of your situation.
      when: "'You can now proceed to installing the Greengrass core' not in dependency_checker.stdout"
